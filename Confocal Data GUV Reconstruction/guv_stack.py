# python script for visualizing data generated by
# analyse_confocal.py. make sure necessary modules 
# are installed. -jsama

#importing modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.patches import Ellipse
import mpl_toolkits.mplot3d.art3d as art3d
from soupsieve import match

#input file name
file_name = input('\nPlease enter the name of the file to be \
visualized below ...\n')

#read csv file into dataframe
df = pd.read_csv(file_name, header=None)
split_at = df[df[0] == 'small guv'].index[0]
big = df.iloc[3:split_at].reset_index(drop = True)
small = df.iloc[split_at+2:].reset_index(drop = True)
big.rename(columns=df.iloc[2], inplace = True)
small.rename(columns=df.iloc[2], inplace = True)
#convert datatype
big = big.astype(np.float64)
small = small.astype(np.float64)

#defining functions
def direct_ellipsoid(x_val, y_val, z_val):
    #direct implementation of algorithm   
    D = np.vstack([x_val*x_val, 
                y_val*y_val, 
                z_val*z_val, 
                2*y_val*z_val, 
                2*x_val*z_val, 
                2*x_val*y_val, 
                2*x_val, 
                2*y_val, 
                2*z_val, 
                np.ones_like(x_val)])
    S = D @ D.T
    C = np.zeros((6,6))
    C[0,0] = -1
    C[1,1] = -1
    C[2,2] = -1
    C[3,3] = -4
    C[4,4] = -4
    C[5,5] = -4
    C[0,1] = 1
    C[1,0] = 1
    C[0,2] = 1
    C[2,0] = 1
    C[1,2] = 1
    C[2,1] = 1
    S11 = S[0:6,0:6]
    S12 = S[0:6,6:10]
    S22 = S[6:10,6:10]
    A = S11 - S12 @ np.linalg.pinv(S22) @ S12.T
    CA = np.linalg.inv(C) @ A
    [eval, evec] = np.linalg.eig(CA)
    v1=evec[:, np.argmax(eval)]
    v2=-np.linalg.pinv(S22) @ S12.T @ v1
    #approximating ellipsoid to be aligned
    #along cartesian axis
    a,b,c,_,_,_,p,q,r,d = np.hstack([v1, v2])
    x0 = -p/a
    y0 = -q/b
    z0 = -r/c
    ABCSQ = p**2/a + q**2/b + r**2/c - d
    A0 = (ABCSQ/a)**0.5
    B0 = (ABCSQ/b)**0.5
    C0 = (ABCSQ/c)**0.5
    return x0, y0, z0, A0, B0, C0
#this function takes in ellipse parameters and 
#returns x array, y array of ellipse
def ellipse_cart(x0,y0,a,b):
    theta = np.linspace(0,2*np.pi,360)
    x = x0 + a*np.cos(theta)
    y = y0 + b*np.sin(theta)
    return x,y
#this function takes in ellipsoid parameters
#and returns x array, y array, z array of ellipsoid
def ellipsoid_cart(x0, y0, z0, rx, ry, rz):
    u = np.linspace(0, 2 * np.pi, 100)
    v = np.linspace(0, np.pi, 100)
    x = x0 + rx * np.outer(np.cos(u), np.sin(v))
    y = y0 + ry * np.outer(np.sin(u), np.sin(v))
    z = z0 + rz * np.outer(np.ones_like(u), np.cos(v))
    return x,y,z
#coordinates of small guv
def small_coord(df1, df2):
    conv = df2.iloc[0]['a (um)']/df2.iloc[0]['a']
    xs = []
    ys = []
    for _, row in df2.iterrows():
        frame, x0, y0 = row[0:3]
        x1, y1= df1.iloc[np.argmin(np.abs(df1['frame'] - frame))][1:3]
        xs.append((x0-x1)*conv)
        ys.append((y0-y1)*conv)
    return np.mean(xs), np.mean(ys)
#set axis
#change these parameters
#to set bounding box of figure
def set_axis(axis):
    axis.set_xlabel(r'x-axis ($\mu$m)')
    axis.set_ylabel(r'y-axis ($\mu$m)')
    axis.set_zlabel(r'z-axis ($\mu$m)')
    axis.set_xlim(-8,8)
    axis.set_ylim(-8,8)
    axis.set_zlim(0,16)
    return
#plot big guv
def plot_big(axis, df1):
    for _, row in df1.iterrows():
        frame, _, _, _, _, _, a, b = row
        e = Ellipse((0,0), 2*a, 2*b, 0, alpha = 0.2, facecolor = 'green',
        edgecolor = 'k')
        axis.add_patch(e)
        art3d.pathpatch_2d_to_3d(e,
        z=(frame-min(df1['frame']))*0.2,# <- scaling in Z 
        zdir="z")
    return
#plot small guv
def plot_small(axis, df1, df2):
    xs, ys = small_coord(df1,df2)
    for _, row in df2.iterrows():
        frame, _, _, _, _, _, a, b = row
        e = Ellipse((xs, ys), 2*a, 2*b, 0, alpha = 0.2, facecolor = 'red',
        edgecolor = 'k')
        axis.add_patch(e)
        art3d.pathpatch_2d_to_3d(e,
        z=(frame-min(df1['frame']))*0.2, # <- scaling in Z
        zdir="z")
    return
#ellipsoid sample points
def get_3d_sample_points_big(df1):
    x_val = np.array([])
    y_val = np.array([])
    z_val = np.array([])
    for _, row in df1.iterrows():
        frame, _, _, _, _, _, a, b = row
        x, y = ellipse_cart(0,0,a,b)
        x_val = np.hstack([x_val,x])
        y_val = np.hstack([y_val,y])
        z_val = np.hstack([z_val,
        np.ones_like(x)*(frame - min(df1['frame']))*0.2 # <- scaling in Z
        ])
    return x_val, y_val, z_val
def get_3d_sample_points_small(df1, df2):
    xs, ys = small_coord(df1, df2)
    x_val = np.array([])
    y_val = np.array([])
    z_val = np.array([])
    for _, row in df2.iterrows():
        frame, _, _, _, _, _, a, b = row
        x, y = ellipse_cart(xs,ys,a,b)
        x_val = np.hstack([x_val,x])
        y_val = np.hstack([y_val,y])
        z_val = np.hstack([z_val,
        np.ones_like(x)*(frame - min(df1['frame']))*0.2 # <- scaling in Z
        ])
    return x_val, y_val, z_val
#plot fitted ellipsoids
def plot_big_ellipsoid(axis, df1):
    x_val, y_val, z_val = get_3d_sample_points_big(df1)
    x0, y0, z0, a, b, c = direct_ellipsoid(x_val, y_val, z_val)
    x, y, z = ellipsoid_cart(x0, y0, z0, a, b, c)
    axis.plot_surface(x, y, z, cstride = 4, rstride = 4, color = 'green',
    alpha = 1)
    axis.set_title(axis.get_title() + '\n big : a = %f, b = %f, c = %f'%(a,
    b,c))
    return
def plot_small_ellipsoid(axis, df1, df2):
    x_val, y_val, z_val = get_3d_sample_points_small(df1, df2)
    x0, y0, z0, a, b, c = direct_ellipsoid(x_val, y_val, z_val)
    x, y, z = ellipsoid_cart(x0, y0, z0, a, b, c)
    axis.plot_surface(x, y, z, cstride = 4, rstride = 4, color = 'red',
    alpha = 1)
    axis.set_title(axis.get_title() + '\n small : a = %f, b = %f, c = %f'%(a,
    b,c))
    return
#main
#first preview 3d slices
#dark background
print('Previewing ellipse stacks')
plt.style.use('dark_background')
fig = plt.figure(figsize=(10,10))
ax = fig.add_subplot(111, projection = '3d')
ax.set_title(file_name + '\n ellipses stacked')
plot_big(ax, big)
plot_small(ax, big, small)
set_axis(ax)
plt.show()
#prompt for small guv
if(input('Fit ellipse for small guv too ? (True/False)\n') == 'True'):
    #fit ellipsoid for small guv too
    print('\n Previewing fitted ellipsoid')
    fig = plt.figure(figsize=(10,10))
    ax1 = fig.add_subplot(121, projection = '3d')
    ax1.set_title(file_name + '\n ellipses stacked')
    ax2 = fig.add_subplot(122, projection = '3d')
    ax2.set_title(file_name + '\n ellipsoid fitted')
    plot_big(ax1, big)
    plot_small(ax1, big, small)
    plot_big_ellipsoid(ax2, big)
    plot_small_ellipsoid(ax2, big, small)
    set_axis(ax1)
    set_axis(ax2)
    plt.show()
else:
    #fit ellipsoid for only big guv
    print('Previewing fitted ellipsoid')
    fig = plt.figure(figsize=(10,10))
    ax1 = fig.add_subplot(121, projection = '3d')
    ax1.set_title(file_name + '\n ellipses stacked')
    ax2 = fig.add_subplot(122, projection = '3d')
    ax2.set_title(file_name + '\n ellipsoid fitted')
    plot_big(ax1, big)
    plot_small(ax1, big, small)
    plot_small(ax2, big, small)
    plot_big_ellipsoid(ax2, big)
    set_axis(ax1)
    set_axis(ax2)
    plt.show()